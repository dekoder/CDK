package exploit

import (
	"fmt"
	"github.com/Xyntax/CDK/conf"
	"github.com/Xyntax/CDK/pkg/lib"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

func SearchLocalFileText(StartDir string) {
	_ = filepath.Walk(StartDir, func(path string, info os.FileInfo, err error) error {

		// broken soft-link file will trigger panic in os.Stat().xxx()
		defer func() {
			if err := recover(); err != nil {

			}
		}()

		fileInfo, _ := os.Stat(path)

		// skip soft-link
		//if util.IsSoftLink(path) {
		//	println("skip ln:", path)
		//	return nil
		//}
		// drop dir, only scan files
		if fileInfo.IsDir() {
			return nil
		}
		// skip large file
		if fileInfo.Size() > conf.ScanFileTextConf.MaxFileByte {
			return filepath.SkipDir
		}
		// skip executable file
		if conf.ScanFileTextConf.SkipExecutableFile && strings.Contains(fileInfo.Mode().String(), "x") {
			return filepath.SkipDir
		}

		// read file text
		data, err := ioutil.ReadFile(path)
		if err != nil {
			//log.Fatal(err) //ignore fatal errors
		}

		// apply regexp match
		for k, v := range conf.ScanFileTextConf.RegexList {
			pattern := regexp.MustCompile(v)
			params := pattern.FindAllStringSubmatch(string(data), -1)
			for _, matched := range params {
				fmt.Printf("\nfound %s in: %s\n%s\n", k, path, matched)
			}
		}

		return nil
	})
}

// plugin interface
type poc struct{}

func (p poc) Desc() string {
	return "search AK/Secrets from input dir, usage: cdk run ak-leakage <dir>"
}
func (p poc) Run() bool {
	// if your script needs input, parse lib.Args["<args>"] by yourself.
	if len(lib.Args["<args>"].([]string)) != 1 {
		log.Println("Invalid input args.")
		log.Fatal(p.Desc())
	}
	path := lib.Args["<args>"].([]string)[0]
	log.Println("searching secrets in ", path)
	SearchLocalFileText(path)
	log.Println("finished.")
	return true
}

func init() {
	plugin := poc{}
	lib.Register("ak-leakage", plugin)
}
